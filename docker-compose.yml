
services:
  # MongoDB Database
  mongo:
    image: mongo:7.0
    container_name: scoutpro-mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: scoutpro
    volumes:
      - mongo_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - scoutpro-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: scoutpro-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://mongo:27017/scoutpro
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
    volumes:
      - backend_uploads:/app/uploads
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - scoutpro-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/health", "-O", "/dev/null"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: scoutpro-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - scoutpro-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/", "-O", "/dev/null"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Proxy Manager
  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: scoutpro-proxy-manager
    restart: unless-stopped
    ports:
      - '80:80'      # HTTP
      - '443:443'    # HTTPS
      - '81:81'      # Admin UI
    environment:
      DB_MYSQL_HOST: "proxy-db"
      DB_MYSQL_PORT: 3306
      DB_MYSQL_USER: "npm"
      DB_MYSQL_PASSWORD: ${NPM_DB_PASSWORD:-npm_password}
      DB_MYSQL_NAME: "npm"
    volumes:
      - nginx_data:/data
      - nginx_letsencrypt:/etc/letsencrypt
    depends_on:
      - proxy-db
    networks:
      - scoutpro-network
      - proxy-network

  # Database for Nginx Proxy Manager
  proxy-db:
    image: 'jc21/mariadb-aria:latest'
    container_name: scoutpro-proxy-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${NPM_DB_ROOT_PASSWORD:-npm_root_password}
      MYSQL_DATABASE: npm
      MYSQL_USER: npm
      MYSQL_PASSWORD: ${NPM_DB_PASSWORD:-npm_password}
    volumes:
      - proxy_db_data:/var/lib/mysql
    networks:
      - proxy-network

volumes:
  mongo_data:
  backend_uploads:
  nginx_data:
  nginx_letsencrypt:
  proxy_db_data:

networks:
  scoutpro-network:
    driver: bridge
  proxy-network:
    driver: bridge